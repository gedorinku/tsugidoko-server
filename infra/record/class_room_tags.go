// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package record

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ClassRoomTag is an object representing the database table.
type ClassRoomTag struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ClassRoomID int64     `boil:"class_room_id" json:"class_room_id" toml:"class_room_id" yaml:"class_room_id"`
	TagID       int64     `boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`
	Count       int       `boil:"count" json:"count" toml:"count" yaml:"count"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *classRoomTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L classRoomTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClassRoomTagColumns = struct {
	ID          string
	ClassRoomID string
	TagID       string
	Count       string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	ClassRoomID: "class_room_id",
	TagID:       "tag_id",
	Count:       "count",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

// ClassRoomTagRels is where relationship names are stored.
var ClassRoomTagRels = struct {
	ClassRoom string
	Tag       string
}{
	ClassRoom: "ClassRoom",
	Tag:       "Tag",
}

// classRoomTagR is where relationships are stored.
type classRoomTagR struct {
	ClassRoom *ClassRoom
	Tag       *Tag
}

// NewStruct creates a new relationship struct
func (*classRoomTagR) NewStruct() *classRoomTagR {
	return &classRoomTagR{}
}

// classRoomTagL is where Load methods for each relationship are stored.
type classRoomTagL struct{}

var (
	classRoomTagColumns               = []string{"id", "class_room_id", "tag_id", "count", "created_at", "updated_at"}
	classRoomTagColumnsWithoutDefault = []string{"class_room_id", "tag_id", "created_at", "updated_at"}
	classRoomTagColumnsWithDefault    = []string{"id", "count"}
	classRoomTagPrimaryKeyColumns     = []string{"id"}
)

type (
	// ClassRoomTagSlice is an alias for a slice of pointers to ClassRoomTag.
	// This should generally be used opposed to []ClassRoomTag.
	ClassRoomTagSlice []*ClassRoomTag
	// ClassRoomTagHook is the signature for custom ClassRoomTag hook methods
	ClassRoomTagHook func(context.Context, boil.ContextExecutor, *ClassRoomTag) error

	classRoomTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	classRoomTagType                 = reflect.TypeOf(&ClassRoomTag{})
	classRoomTagMapping              = queries.MakeStructMapping(classRoomTagType)
	classRoomTagPrimaryKeyMapping, _ = queries.BindMapping(classRoomTagType, classRoomTagMapping, classRoomTagPrimaryKeyColumns)
	classRoomTagInsertCacheMut       sync.RWMutex
	classRoomTagInsertCache          = make(map[string]insertCache)
	classRoomTagUpdateCacheMut       sync.RWMutex
	classRoomTagUpdateCache          = make(map[string]updateCache)
	classRoomTagUpsertCacheMut       sync.RWMutex
	classRoomTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var classRoomTagBeforeInsertHooks []ClassRoomTagHook
var classRoomTagBeforeUpdateHooks []ClassRoomTagHook
var classRoomTagBeforeDeleteHooks []ClassRoomTagHook
var classRoomTagBeforeUpsertHooks []ClassRoomTagHook

var classRoomTagAfterInsertHooks []ClassRoomTagHook
var classRoomTagAfterSelectHooks []ClassRoomTagHook
var classRoomTagAfterUpdateHooks []ClassRoomTagHook
var classRoomTagAfterDeleteHooks []ClassRoomTagHook
var classRoomTagAfterUpsertHooks []ClassRoomTagHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ClassRoomTag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range classRoomTagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ClassRoomTag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range classRoomTagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ClassRoomTag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range classRoomTagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ClassRoomTag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range classRoomTagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ClassRoomTag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range classRoomTagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ClassRoomTag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range classRoomTagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ClassRoomTag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range classRoomTagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ClassRoomTag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range classRoomTagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ClassRoomTag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range classRoomTagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClassRoomTagHook registers your hook function for all future operations.
func AddClassRoomTagHook(hookPoint boil.HookPoint, classRoomTagHook ClassRoomTagHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		classRoomTagBeforeInsertHooks = append(classRoomTagBeforeInsertHooks, classRoomTagHook)
	case boil.BeforeUpdateHook:
		classRoomTagBeforeUpdateHooks = append(classRoomTagBeforeUpdateHooks, classRoomTagHook)
	case boil.BeforeDeleteHook:
		classRoomTagBeforeDeleteHooks = append(classRoomTagBeforeDeleteHooks, classRoomTagHook)
	case boil.BeforeUpsertHook:
		classRoomTagBeforeUpsertHooks = append(classRoomTagBeforeUpsertHooks, classRoomTagHook)
	case boil.AfterInsertHook:
		classRoomTagAfterInsertHooks = append(classRoomTagAfterInsertHooks, classRoomTagHook)
	case boil.AfterSelectHook:
		classRoomTagAfterSelectHooks = append(classRoomTagAfterSelectHooks, classRoomTagHook)
	case boil.AfterUpdateHook:
		classRoomTagAfterUpdateHooks = append(classRoomTagAfterUpdateHooks, classRoomTagHook)
	case boil.AfterDeleteHook:
		classRoomTagAfterDeleteHooks = append(classRoomTagAfterDeleteHooks, classRoomTagHook)
	case boil.AfterUpsertHook:
		classRoomTagAfterUpsertHooks = append(classRoomTagAfterUpsertHooks, classRoomTagHook)
	}
}

// One returns a single classRoomTag record from the query.
func (q classRoomTagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClassRoomTag, error) {
	o := &ClassRoomTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "record: failed to execute a one query for class_room_tags")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ClassRoomTag records from the query.
func (q classRoomTagQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClassRoomTagSlice, error) {
	var o []*ClassRoomTag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "record: failed to assign all query results to ClassRoomTag slice")
	}

	if len(classRoomTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ClassRoomTag records in the query.
func (q classRoomTagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "record: failed to count class_room_tags rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q classRoomTagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "record: failed to check if class_room_tags exists")
	}

	return count > 0, nil
}

// ClassRoom pointed to by the foreign key.
func (o *ClassRoomTag) ClassRoom(mods ...qm.QueryMod) classRoomQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ClassRoomID),
	}

	queryMods = append(queryMods, mods...)

	query := ClassRooms(queryMods...)
	queries.SetFrom(query.Query, "\"class_rooms\"")

	return query
}

// Tag pointed to by the foreign key.
func (o *ClassRoomTag) Tag(mods ...qm.QueryMod) tagQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TagID),
	}

	queryMods = append(queryMods, mods...)

	query := Tags(queryMods...)
	queries.SetFrom(query.Query, "\"tags\"")

	return query
}

// LoadClassRoom allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (classRoomTagL) LoadClassRoom(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClassRoomTag interface{}, mods queries.Applicator) error {
	var slice []*ClassRoomTag
	var object *ClassRoomTag

	if singular {
		object = maybeClassRoomTag.(*ClassRoomTag)
	} else {
		slice = *maybeClassRoomTag.(*[]*ClassRoomTag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &classRoomTagR{}
		}
		args = append(args, object.ClassRoomID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &classRoomTagR{}
			}

			for _, a := range args {
				if a == obj.ClassRoomID {
					continue Outer
				}
			}

			args = append(args, obj.ClassRoomID)

		}
	}

	query := NewQuery(qm.From(`class_rooms`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ClassRoom")
	}

	var resultSlice []*ClassRoom
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ClassRoom")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for class_rooms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for class_rooms")
	}

	if len(classRoomTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ClassRoom = foreign
		if foreign.R == nil {
			foreign.R = &classRoomR{}
		}
		foreign.R.ClassRoomTags = append(foreign.R.ClassRoomTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClassRoomID == foreign.ID {
				local.R.ClassRoom = foreign
				if foreign.R == nil {
					foreign.R = &classRoomR{}
				}
				foreign.R.ClassRoomTags = append(foreign.R.ClassRoomTags, local)
				break
			}
		}
	}

	return nil
}

// LoadTag allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (classRoomTagL) LoadTag(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClassRoomTag interface{}, mods queries.Applicator) error {
	var slice []*ClassRoomTag
	var object *ClassRoomTag

	if singular {
		object = maybeClassRoomTag.(*ClassRoomTag)
	} else {
		slice = *maybeClassRoomTag.(*[]*ClassRoomTag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &classRoomTagR{}
		}
		args = append(args, object.TagID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &classRoomTagR{}
			}

			for _, a := range args {
				if a == obj.TagID {
					continue Outer
				}
			}

			args = append(args, obj.TagID)

		}
	}

	query := NewQuery(qm.From(`tags`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tag")
	}

	var resultSlice []*Tag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tags")
	}

	if len(classRoomTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tag = foreign
		if foreign.R == nil {
			foreign.R = &tagR{}
		}
		foreign.R.ClassRoomTags = append(foreign.R.ClassRoomTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TagID == foreign.ID {
				local.R.Tag = foreign
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.ClassRoomTags = append(foreign.R.ClassRoomTags, local)
				break
			}
		}
	}

	return nil
}

// SetClassRoom of the classRoomTag to the related item.
// Sets o.R.ClassRoom to related.
// Adds o to related.R.ClassRoomTags.
func (o *ClassRoomTag) SetClassRoom(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ClassRoom) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"class_room_tags\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"class_room_id"}),
		strmangle.WhereClause("\"", "\"", 2, classRoomTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClassRoomID = related.ID
	if o.R == nil {
		o.R = &classRoomTagR{
			ClassRoom: related,
		}
	} else {
		o.R.ClassRoom = related
	}

	if related.R == nil {
		related.R = &classRoomR{
			ClassRoomTags: ClassRoomTagSlice{o},
		}
	} else {
		related.R.ClassRoomTags = append(related.R.ClassRoomTags, o)
	}

	return nil
}

// SetTag of the classRoomTag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.ClassRoomTags.
func (o *ClassRoomTag) SetTag(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tag) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"class_room_tags\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tag_id"}),
		strmangle.WhereClause("\"", "\"", 2, classRoomTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TagID = related.ID
	if o.R == nil {
		o.R = &classRoomTagR{
			Tag: related,
		}
	} else {
		o.R.Tag = related
	}

	if related.R == nil {
		related.R = &tagR{
			ClassRoomTags: ClassRoomTagSlice{o},
		}
	} else {
		related.R.ClassRoomTags = append(related.R.ClassRoomTags, o)
	}

	return nil
}

// ClassRoomTags retrieves all the records using an executor.
func ClassRoomTags(mods ...qm.QueryMod) classRoomTagQuery {
	mods = append(mods, qm.From("\"class_room_tags\""))
	return classRoomTagQuery{NewQuery(mods...)}
}

// FindClassRoomTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClassRoomTag(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ClassRoomTag, error) {
	classRoomTagObj := &ClassRoomTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"class_room_tags\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, classRoomTagObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "record: unable to select from class_room_tags")
	}

	return classRoomTagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClassRoomTag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("record: no class_room_tags provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(classRoomTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	classRoomTagInsertCacheMut.RLock()
	cache, cached := classRoomTagInsertCache[key]
	classRoomTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			classRoomTagColumns,
			classRoomTagColumnsWithDefault,
			classRoomTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(classRoomTagType, classRoomTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(classRoomTagType, classRoomTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"class_room_tags\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"class_room_tags\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "record: unable to insert into class_room_tags")
	}

	if !cached {
		classRoomTagInsertCacheMut.Lock()
		classRoomTagInsertCache[key] = cache
		classRoomTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ClassRoomTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClassRoomTag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	classRoomTagUpdateCacheMut.RLock()
	cache, cached := classRoomTagUpdateCache[key]
	classRoomTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			classRoomTagColumns,
			classRoomTagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("record: unable to update class_room_tags, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"class_room_tags\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, classRoomTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(classRoomTagType, classRoomTagMapping, append(wl, classRoomTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to update class_room_tags row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "record: failed to get rows affected by update for class_room_tags")
	}

	if !cached {
		classRoomTagUpdateCacheMut.Lock()
		classRoomTagUpdateCache[key] = cache
		classRoomTagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q classRoomTagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to update all for class_room_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to retrieve rows affected for class_room_tags")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClassRoomTagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("record: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), classRoomTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"class_room_tags\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, classRoomTagPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to update all in classRoomTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to retrieve rows affected all in update all classRoomTag")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ClassRoomTag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("record: no class_room_tags provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(classRoomTagColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	classRoomTagUpsertCacheMut.RLock()
	cache, cached := classRoomTagUpsertCache[key]
	classRoomTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			classRoomTagColumns,
			classRoomTagColumnsWithDefault,
			classRoomTagColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			classRoomTagColumns,
			classRoomTagPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("record: unable to upsert class_room_tags, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(classRoomTagPrimaryKeyColumns))
			copy(conflict, classRoomTagPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"class_room_tags\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(classRoomTagType, classRoomTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(classRoomTagType, classRoomTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "record: unable to upsert class_room_tags")
	}

	if !cached {
		classRoomTagUpsertCacheMut.Lock()
		classRoomTagUpsertCache[key] = cache
		classRoomTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ClassRoomTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClassRoomTag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("record: no ClassRoomTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), classRoomTagPrimaryKeyMapping)
	sql := "DELETE FROM \"class_room_tags\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to delete from class_room_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "record: failed to get rows affected by delete for class_room_tags")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q classRoomTagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("record: no classRoomTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to delete all from class_room_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "record: failed to get rows affected by deleteall for class_room_tags")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClassRoomTagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("record: no ClassRoomTag slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(classRoomTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), classRoomTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"class_room_tags\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, classRoomTagPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "record: unable to delete all from classRoomTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "record: failed to get rows affected by deleteall for class_room_tags")
	}

	if len(classRoomTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClassRoomTag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClassRoomTag(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClassRoomTagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClassRoomTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), classRoomTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"class_room_tags\".* FROM \"class_room_tags\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, classRoomTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "record: unable to reload all in ClassRoomTagSlice")
	}

	*o = slice

	return nil
}

// ClassRoomTagExists checks if the ClassRoomTag row exists.
func ClassRoomTagExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"class_room_tags\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "record: unable to check if class_room_tags exists")
	}

	return exists, nil
}
