// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package record

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testClassRoomTags(t *testing.T) {
	t.Parallel()

	query := ClassRoomTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testClassRoomTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClassRoomTag{}
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ClassRoomTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClassRoomTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClassRoomTag{}
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ClassRoomTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ClassRoomTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClassRoomTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClassRoomTag{}
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ClassRoomTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ClassRoomTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClassRoomTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClassRoomTag{}
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ClassRoomTagExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ClassRoomTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ClassRoomTagExists to return true, but got false.")
	}
}

func testClassRoomTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClassRoomTag{}
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	classRoomTagFound, err := FindClassRoomTag(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if classRoomTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testClassRoomTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClassRoomTag{}
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ClassRoomTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testClassRoomTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClassRoomTag{}
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ClassRoomTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testClassRoomTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	classRoomTagOne := &ClassRoomTag{}
	classRoomTagTwo := &ClassRoomTag{}
	if err = randomize.Struct(seed, classRoomTagOne, classRoomTagDBTypes, false, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}
	if err = randomize.Struct(seed, classRoomTagTwo, classRoomTagDBTypes, false, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = classRoomTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = classRoomTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ClassRoomTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testClassRoomTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	classRoomTagOne := &ClassRoomTag{}
	classRoomTagTwo := &ClassRoomTag{}
	if err = randomize.Struct(seed, classRoomTagOne, classRoomTagDBTypes, false, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}
	if err = randomize.Struct(seed, classRoomTagTwo, classRoomTagDBTypes, false, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = classRoomTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = classRoomTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ClassRoomTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func classRoomTagBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ClassRoomTag) error {
	*o = ClassRoomTag{}
	return nil
}

func classRoomTagAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ClassRoomTag) error {
	*o = ClassRoomTag{}
	return nil
}

func classRoomTagAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ClassRoomTag) error {
	*o = ClassRoomTag{}
	return nil
}

func classRoomTagBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ClassRoomTag) error {
	*o = ClassRoomTag{}
	return nil
}

func classRoomTagAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ClassRoomTag) error {
	*o = ClassRoomTag{}
	return nil
}

func classRoomTagBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ClassRoomTag) error {
	*o = ClassRoomTag{}
	return nil
}

func classRoomTagAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ClassRoomTag) error {
	*o = ClassRoomTag{}
	return nil
}

func classRoomTagBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ClassRoomTag) error {
	*o = ClassRoomTag{}
	return nil
}

func classRoomTagAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ClassRoomTag) error {
	*o = ClassRoomTag{}
	return nil
}

func testClassRoomTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ClassRoomTag{}
	o := &ClassRoomTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag object: %s", err)
	}

	AddClassRoomTagHook(boil.BeforeInsertHook, classRoomTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	classRoomTagBeforeInsertHooks = []ClassRoomTagHook{}

	AddClassRoomTagHook(boil.AfterInsertHook, classRoomTagAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	classRoomTagAfterInsertHooks = []ClassRoomTagHook{}

	AddClassRoomTagHook(boil.AfterSelectHook, classRoomTagAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	classRoomTagAfterSelectHooks = []ClassRoomTagHook{}

	AddClassRoomTagHook(boil.BeforeUpdateHook, classRoomTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	classRoomTagBeforeUpdateHooks = []ClassRoomTagHook{}

	AddClassRoomTagHook(boil.AfterUpdateHook, classRoomTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	classRoomTagAfterUpdateHooks = []ClassRoomTagHook{}

	AddClassRoomTagHook(boil.BeforeDeleteHook, classRoomTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	classRoomTagBeforeDeleteHooks = []ClassRoomTagHook{}

	AddClassRoomTagHook(boil.AfterDeleteHook, classRoomTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	classRoomTagAfterDeleteHooks = []ClassRoomTagHook{}

	AddClassRoomTagHook(boil.BeforeUpsertHook, classRoomTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	classRoomTagBeforeUpsertHooks = []ClassRoomTagHook{}

	AddClassRoomTagHook(boil.AfterUpsertHook, classRoomTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	classRoomTagAfterUpsertHooks = []ClassRoomTagHook{}
}

func testClassRoomTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClassRoomTag{}
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ClassRoomTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClassRoomTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClassRoomTag{}
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(classRoomTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ClassRoomTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClassRoomTagToOneClassRoomUsingClassRoom(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ClassRoomTag
	var foreign ClassRoom

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, classRoomTagDBTypes, false, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, classRoomDBTypes, false, classRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoom struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ClassRoomID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ClassRoom().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ClassRoomTagSlice{&local}
	if err = local.L.LoadClassRoom(ctx, tx, false, (*[]*ClassRoomTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ClassRoom == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ClassRoom = nil
	if err = local.L.LoadClassRoom(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ClassRoom == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testClassRoomTagToOneTagUsingTag(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ClassRoomTag
	var foreign Tag

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, classRoomTagDBTypes, false, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TagID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tag().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ClassRoomTagSlice{&local}
	if err = local.L.LoadTag(ctx, tx, false, (*[]*ClassRoomTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tag = nil
	if err = local.L.LoadTag(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testClassRoomTagToOneSetOpClassRoomUsingClassRoom(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ClassRoomTag
	var b, c ClassRoom

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, classRoomTagDBTypes, false, strmangle.SetComplement(classRoomTagPrimaryKeyColumns, classRoomTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, classRoomDBTypes, false, strmangle.SetComplement(classRoomPrimaryKeyColumns, classRoomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, classRoomDBTypes, false, strmangle.SetComplement(classRoomPrimaryKeyColumns, classRoomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ClassRoom{&b, &c} {
		err = a.SetClassRoom(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ClassRoom != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ClassRoomTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ClassRoomID != x.ID {
			t.Error("foreign key was wrong value", a.ClassRoomID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ClassRoomID))
		reflect.Indirect(reflect.ValueOf(&a.ClassRoomID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ClassRoomID != x.ID {
			t.Error("foreign key was wrong value", a.ClassRoomID, x.ID)
		}
	}
}
func testClassRoomTagToOneSetOpTagUsingTag(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ClassRoomTag
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, classRoomTagDBTypes, false, strmangle.SetComplement(classRoomTagPrimaryKeyColumns, classRoomTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tag{&b, &c} {
		err = a.SetTag(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ClassRoomTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TagID))
		reflect.Indirect(reflect.ValueOf(&a.TagID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID, x.ID)
		}
	}
}

func testClassRoomTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClassRoomTag{}
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testClassRoomTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClassRoomTag{}
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ClassRoomTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testClassRoomTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClassRoomTag{}
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ClassRoomTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	classRoomTagDBTypes = map[string]string{`ClassRoomID`: `bigint`, `Count`: `integer`, `CreatedAt`: `timestamp without time zone`, `ID`: `bigint`, `TagID`: `bigint`, `UpdatedAt`: `timestamp without time zone`}
	_                   = bytes.MinRead
)

func testClassRoomTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(classRoomTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(classRoomTagColumns) == len(classRoomTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ClassRoomTag{}
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ClassRoomTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testClassRoomTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(classRoomTagColumns) == len(classRoomTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ClassRoomTag{}
	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ClassRoomTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, classRoomTagDBTypes, true, classRoomTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(classRoomTagColumns, classRoomTagPrimaryKeyColumns) {
		fields = classRoomTagColumns
	} else {
		fields = strmangle.SetComplement(
			classRoomTagColumns,
			classRoomTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ClassRoomTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testClassRoomTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(classRoomTagColumns) == len(classRoomTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ClassRoomTag{}
	if err = randomize.Struct(seed, &o, classRoomTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ClassRoomTag: %s", err)
	}

	count, err := ClassRoomTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, classRoomTagDBTypes, false, classRoomTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ClassRoomTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ClassRoomTag: %s", err)
	}

	count, err = ClassRoomTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
