// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package record

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBeacons(t *testing.T) {
	t.Parallel()

	query := Beacons()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBeaconsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Beacon{}
	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Beacons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBeaconsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Beacon{}
	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Beacons().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Beacons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBeaconsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Beacon{}
	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BeaconSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Beacons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBeaconsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Beacon{}
	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BeaconExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Beacon exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BeaconExists to return true, but got false.")
	}
}

func testBeaconsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Beacon{}
	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	beaconFound, err := FindBeacon(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if beaconFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBeaconsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Beacon{}
	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Beacons().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBeaconsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Beacon{}
	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Beacons().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBeaconsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	beaconOne := &Beacon{}
	beaconTwo := &Beacon{}
	if err = randomize.Struct(seed, beaconOne, beaconDBTypes, false, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}
	if err = randomize.Struct(seed, beaconTwo, beaconDBTypes, false, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = beaconOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = beaconTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Beacons().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBeaconsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	beaconOne := &Beacon{}
	beaconTwo := &Beacon{}
	if err = randomize.Struct(seed, beaconOne, beaconDBTypes, false, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}
	if err = randomize.Struct(seed, beaconTwo, beaconDBTypes, false, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = beaconOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = beaconTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Beacons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func beaconBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Beacon) error {
	*o = Beacon{}
	return nil
}

func beaconAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Beacon) error {
	*o = Beacon{}
	return nil
}

func beaconAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Beacon) error {
	*o = Beacon{}
	return nil
}

func beaconBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Beacon) error {
	*o = Beacon{}
	return nil
}

func beaconAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Beacon) error {
	*o = Beacon{}
	return nil
}

func beaconBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Beacon) error {
	*o = Beacon{}
	return nil
}

func beaconAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Beacon) error {
	*o = Beacon{}
	return nil
}

func beaconBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Beacon) error {
	*o = Beacon{}
	return nil
}

func beaconAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Beacon) error {
	*o = Beacon{}
	return nil
}

func testBeaconsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Beacon{}
	o := &Beacon{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, beaconDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Beacon object: %s", err)
	}

	AddBeaconHook(boil.BeforeInsertHook, beaconBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	beaconBeforeInsertHooks = []BeaconHook{}

	AddBeaconHook(boil.AfterInsertHook, beaconAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	beaconAfterInsertHooks = []BeaconHook{}

	AddBeaconHook(boil.AfterSelectHook, beaconAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	beaconAfterSelectHooks = []BeaconHook{}

	AddBeaconHook(boil.BeforeUpdateHook, beaconBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	beaconBeforeUpdateHooks = []BeaconHook{}

	AddBeaconHook(boil.AfterUpdateHook, beaconAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	beaconAfterUpdateHooks = []BeaconHook{}

	AddBeaconHook(boil.BeforeDeleteHook, beaconBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	beaconBeforeDeleteHooks = []BeaconHook{}

	AddBeaconHook(boil.AfterDeleteHook, beaconAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	beaconAfterDeleteHooks = []BeaconHook{}

	AddBeaconHook(boil.BeforeUpsertHook, beaconBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	beaconBeforeUpsertHooks = []BeaconHook{}

	AddBeaconHook(boil.AfterUpsertHook, beaconAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	beaconAfterUpsertHooks = []BeaconHook{}
}

func testBeaconsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Beacon{}
	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Beacons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBeaconsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Beacon{}
	if err = randomize.Struct(seed, o, beaconDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(beaconColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Beacons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBeaconToOneClassRoomUsingClassRoom(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Beacon
	var foreign ClassRoom

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, beaconDBTypes, false, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, classRoomDBTypes, false, classRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClassRoom struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ClassRoomID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ClassRoom().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BeaconSlice{&local}
	if err = local.L.LoadClassRoom(ctx, tx, false, (*[]*Beacon)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ClassRoom == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ClassRoom = nil
	if err = local.L.LoadClassRoom(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ClassRoom == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBeaconToOneSetOpClassRoomUsingClassRoom(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Beacon
	var b, c ClassRoom

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, beaconDBTypes, false, strmangle.SetComplement(beaconPrimaryKeyColumns, beaconColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, classRoomDBTypes, false, strmangle.SetComplement(classRoomPrimaryKeyColumns, classRoomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, classRoomDBTypes, false, strmangle.SetComplement(classRoomPrimaryKeyColumns, classRoomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ClassRoom{&b, &c} {
		err = a.SetClassRoom(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ClassRoom != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Beacons[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ClassRoomID != x.ID {
			t.Error("foreign key was wrong value", a.ClassRoomID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ClassRoomID))
		reflect.Indirect(reflect.ValueOf(&a.ClassRoomID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ClassRoomID != x.ID {
			t.Error("foreign key was wrong value", a.ClassRoomID, x.ID)
		}
	}
}

func testBeaconsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Beacon{}
	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBeaconsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Beacon{}
	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BeaconSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBeaconsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Beacon{}
	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Beacons().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	beaconDBTypes = map[string]string{`Bssid`: `character varying`, `ClassRoomID`: `bigint`, `CreatedAt`: `timestamp without time zone`, `ID`: `bigint`, `UpdatedAt`: `timestamp without time zone`}
	_             = bytes.MinRead
)

func testBeaconsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(beaconPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(beaconColumns) == len(beaconPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Beacon{}
	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Beacons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBeaconsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(beaconColumns) == len(beaconPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Beacon{}
	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Beacons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, beaconDBTypes, true, beaconPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(beaconColumns, beaconPrimaryKeyColumns) {
		fields = beaconColumns
	} else {
		fields = strmangle.SetComplement(
			beaconColumns,
			beaconPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BeaconSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBeaconsUpsert(t *testing.T) {
	t.Parallel()

	if len(beaconColumns) == len(beaconPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Beacon{}
	if err = randomize.Struct(seed, &o, beaconDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Beacon: %s", err)
	}

	count, err := Beacons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, beaconDBTypes, false, beaconPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Beacon struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Beacon: %s", err)
	}

	count, err = Beacons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
